#if os(macOS)
import SystemConfiguration
#endif
// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(anoncreds_uniffiFFI)
    import anoncreds_uniffiFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_anoncreds_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_anoncreds_uniffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol CredentialProtocol: AnyObject {
    func credDefId() -> String

    func revRegId() -> String?

    func revRegIndex() -> UInt32?

    func schemaId() -> String

    func toJson() -> String

    func values() -> [String: String]
}

open class Credential:
    CredentialProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credential(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credential_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credential(pointer, $0) }
    }

    open func credDefId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_cred_def_id(self.uniffiClonePointer(), $0)
        })
    }

    open func revRegId() -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_rev_reg_id(self.uniffiClonePointer(), $0)
        })
    }

    open func revRegIndex() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_rev_reg_index(self.uniffiClonePointer(), $0)
        })
    }

    open func schemaId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_schema_id(self.uniffiClonePointer(), $0)
        })
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_to_json(self.uniffiClonePointer(), $0)
        })
    }

    open func values() -> [String: String] {
        return try! FfiConverterDictionaryStringString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credential_values(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredential: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Credential

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
        return Credential(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Credential) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Credential {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Credential, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredential_lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
    return try FfiConverterTypeCredential.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredential_lower(_ value: Credential) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredential.lower(value)
}

public protocol CredentialConversionsProtocol: AnyObject {
    func credentialFromW3cJson(w3cCredentialJson: String) throws -> Credential

    func credentialToW3cJson(credential: Credential, issuerIdString: String, versionString: String?) throws -> String
}

open class CredentialConversions:
    CredentialConversionsProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialconversions(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_anoncreds_uniffi_fn_constructor_credentialconversions_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialconversions(pointer, $0) }
    }

    open func credentialFromW3cJson(w3cCredentialJson: String) throws -> Credential {
        return try FfiConverterTypeCredential.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_credentialconversions_credential_from_w3c_json(self.uniffiClonePointer(),
                                                                                             FfiConverterString.lower(w3cCredentialJson), $0)
        })
    }

    open func credentialToW3cJson(credential: Credential, issuerIdString: String, versionString: String?) throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_credentialconversions_credential_to_w3c_json(self.uniffiClonePointer(),
                                                                                           FfiConverterTypeCredential.lower(credential),
                                                                                           FfiConverterString.lower(issuerIdString),
                                                                                           FfiConverterOptionString.lower(versionString), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialConversions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialConversions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialConversions {
        return CredentialConversions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialConversions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialConversions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialConversions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialConversions_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialConversions {
    return try FfiConverterTypeCredentialConversions.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialConversions_lower(_ value: CredentialConversions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialConversions.lower(value)
}

public protocol CredentialDefinitionProtocol: AnyObject {
    func credDefId() -> String

    func issuerId() -> String

    func schemaId() -> String

    func toJson() -> String
}

open class CredentialDefinition:
    CredentialDefinitionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialdefinition(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialdefinition_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialdefinition(pointer, $0) }
    }

    open func credDefId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialdefinition_cred_def_id(self.uniffiClonePointer(), $0)
        })
    }

    open func issuerId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialdefinition_issuer_id(self.uniffiClonePointer(), $0)
        })
    }

    open func schemaId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialdefinition_schema_id(self.uniffiClonePointer(), $0)
        })
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialdefinition_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinition {
        return CredentialDefinition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialDefinition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialDefinition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinition_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinition {
    return try FfiConverterTypeCredentialDefinition.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinition_lower(_ value: CredentialDefinition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialDefinition.lower(value)
}

public protocol CredentialDefinitionPrivateProtocol: AnyObject {
    func toJson() -> String
}

open class CredentialDefinitionPrivate:
    CredentialDefinitionPrivateProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialdefinitionprivate(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialdefinitionprivate_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialdefinitionprivate(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialdefinitionprivate_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinitionPrivate

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinitionPrivate {
        return CredentialDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionPrivate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialDefinitionPrivate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinitionPrivate_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinitionPrivate {
    return try FfiConverterTypeCredentialDefinitionPrivate.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinitionPrivate_lower(_ value: CredentialDefinitionPrivate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialDefinitionPrivate.lower(value)
}

public protocol CredentialKeyCorrectnessProofProtocol: AnyObject {
    func toJson() -> String
}

open class CredentialKeyCorrectnessProof:
    CredentialKeyCorrectnessProofProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialkeycorrectnessproof(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialkeycorrectnessproof_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialkeycorrectnessproof(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialkeycorrectnessproof_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialKeyCorrectnessProof: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialKeyCorrectnessProof

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialKeyCorrectnessProof {
        return CredentialKeyCorrectnessProof(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialKeyCorrectnessProof) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialKeyCorrectnessProof {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialKeyCorrectnessProof, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialKeyCorrectnessProof_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialKeyCorrectnessProof {
    return try FfiConverterTypeCredentialKeyCorrectnessProof.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialKeyCorrectnessProof_lower(_ value: CredentialKeyCorrectnessProof) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialKeyCorrectnessProof.lower(value)
}

public protocol CredentialOfferProtocol: AnyObject {
    func credDefId() -> String

    func toJson() -> String
}

open class CredentialOffer:
    CredentialOfferProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialoffer(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialoffer_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialoffer(pointer, $0) }
    }

    open func credDefId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialoffer_cred_def_id(self.uniffiClonePointer(), $0)
        })
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialoffer_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialOffer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialOffer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialOffer {
        return CredentialOffer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialOffer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialOffer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialOffer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialOffer_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialOffer {
    return try FfiConverterTypeCredentialOffer.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialOffer_lower(_ value: CredentialOffer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialOffer.lower(value)
}

public protocol CredentialRequestProtocol: AnyObject {
    func toJson() -> String
}

open class CredentialRequest:
    CredentialRequestProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialrequest(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialrequest_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialrequest(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialrequest_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialRequest

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequest {
        return CredentialRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialRequest) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequest {
    return try FfiConverterTypeCredentialRequest.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequest_lower(_ value: CredentialRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialRequest.lower(value)
}

public protocol CredentialRequestMetadataProtocol: AnyObject {
    func toJson() -> String
}

open class CredentialRequestMetadata:
    CredentialRequestMetadataProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialrequestmetadata(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialrequestmetadata_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialrequestmetadata(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialrequestmetadata_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialRequestMetadata: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialRequestMetadata

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequestMetadata {
        return CredentialRequestMetadata(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialRequestMetadata) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRequestMetadata {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialRequestMetadata, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequestMetadata_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequestMetadata {
    return try FfiConverterTypeCredentialRequestMetadata.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequestMetadata_lower(_ value: CredentialRequestMetadata) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialRequestMetadata.lower(value)
}

public protocol CredentialRevocationStateProtocol: AnyObject {
    func toJson() -> String
}

open class CredentialRevocationState:
    CredentialRevocationStateProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_credentialrevocationstate(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_credentialrevocationstate_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_credentialrevocationstate(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_credentialrevocationstate_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialRevocationState: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialRevocationState

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRevocationState {
        return CredentialRevocationState(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialRevocationState) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRevocationState {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialRevocationState, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRevocationState_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRevocationState {
    return try FfiConverterTypeCredentialRevocationState.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRevocationState_lower(_ value: CredentialRevocationState) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialRevocationState.lower(value)
}

public protocol IssuerProtocol: AnyObject {
    func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, attrRawValues: [String: String], attrEncValues: [String: String]?, revocationConfig: CredentialRevocationConfig?) throws -> Credential

    func createCredentialDefinition(schemaId: String, schema: Schema, tag: String, issuerId: String, supportRevocation: Bool) throws -> CredentialDefinitionTuple

    func createCredentialOffer(schemaId: String, credDefId: String, keyProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer

    func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, tag: String, maxCredNum: UInt32, tailsDirPath: String?) throws -> RevocationRegistryDefinitionTuple

    func createRevocationStatusList(credDef: CredentialDefinition, revRegDefId: String, revRegDef: RevocationRegistryDefinition, revRegPriv: RevocationRegistryDefinitionPrivate, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList

    func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema

    func updateRevocationStatusList(credDef: CredentialDefinition, timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, revRegPriv: RevocationRegistryDefinitionPrivate, currentList: RevocationStatusList) throws -> RevocationStatusList
}

open class Issuer:
    IssuerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_issuer(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_anoncreds_uniffi_fn_constructor_issuer_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_issuer(pointer, $0) }
    }

    open func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, attrRawValues: [String: String], attrEncValues: [String: String]?, revocationConfig: CredentialRevocationConfig?) throws -> Credential {
        return try FfiConverterTypeCredential.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_credential(self.uniffiClonePointer(),
                                                                       FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                       FfiConverterTypeCredentialDefinitionPrivate.lower(credDefPrivate),
                                                                       FfiConverterTypeCredentialOffer.lower(credOffer),
                                                                       FfiConverterTypeCredentialRequest.lower(credRequest),
                                                                       FfiConverterDictionaryStringString.lower(attrRawValues),
                                                                       FfiConverterOptionDictionaryStringString.lower(attrEncValues),
                                                                       FfiConverterOptionTypeCredentialRevocationConfig.lower(revocationConfig), $0)
        })
    }

    open func createCredentialDefinition(schemaId: String, schema: Schema, tag: String, issuerId: String, supportRevocation: Bool) throws -> CredentialDefinitionTuple {
        return try FfiConverterTypeCredentialDefinitionTuple.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_credential_definition(self.uniffiClonePointer(),
                                                                                  FfiConverterString.lower(schemaId),
                                                                                  FfiConverterTypeSchema.lower(schema),
                                                                                  FfiConverterString.lower(tag),
                                                                                  FfiConverterString.lower(issuerId),
                                                                                  FfiConverterBool.lower(supportRevocation), $0)
        })
    }

    open func createCredentialOffer(schemaId: String, credDefId: String, keyProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer {
        return try FfiConverterTypeCredentialOffer.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_credential_offer(self.uniffiClonePointer(),
                                                                             FfiConverterString.lower(schemaId),
                                                                             FfiConverterString.lower(credDefId),
                                                                             FfiConverterTypeCredentialKeyCorrectnessProof.lower(keyProof), $0)
        })
    }

    open func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, tag: String, maxCredNum: UInt32, tailsDirPath: String?) throws -> RevocationRegistryDefinitionTuple {
        return try FfiConverterTypeRevocationRegistryDefinitionTuple.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_revocation_registry_def(self.uniffiClonePointer(),
                                                                                    FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                                    FfiConverterString.lower(credDefId),
                                                                                    FfiConverterString.lower(tag),
                                                                                    FfiConverterUInt32.lower(maxCredNum),
                                                                                    FfiConverterOptionString.lower(tailsDirPath), $0)
        })
    }

    open func createRevocationStatusList(credDef: CredentialDefinition, revRegDefId: String, revRegDef: RevocationRegistryDefinition, revRegPriv: RevocationRegistryDefinitionPrivate, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_revocation_status_list(self.uniffiClonePointer(),
                                                                                   FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                                   FfiConverterString.lower(revRegDefId),
                                                                                   FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                                   FfiConverterTypeRevocationRegistryDefinitionPrivate.lower(revRegPriv),
                                                                                   FfiConverterOptionUInt64.lower(timestamp),
                                                                                   FfiConverterBool.lower(issuanceByDefault), $0)
        })
    }

    open func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema {
        return try FfiConverterTypeSchema.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_create_schema(self.uniffiClonePointer(),
                                                                   FfiConverterString.lower(schemaName),
                                                                   FfiConverterString.lower(schemaVersion),
                                                                   FfiConverterString.lower(issuerId),
                                                                   FfiConverterSequenceString.lower(attrNames), $0)
        })
    }

    open func updateRevocationStatusList(credDef: CredentialDefinition, timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, revRegPriv: RevocationRegistryDefinitionPrivate, currentList: RevocationStatusList) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_issuer_update_revocation_status_list(self.uniffiClonePointer(),
                                                                                   FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                                   FfiConverterOptionUInt64.lower(timestamp),
                                                                                   FfiConverterOptionSequenceUInt32.lower(issued),
                                                                                   FfiConverterOptionSequenceUInt32.lower(revoked),
                                                                                   FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                                   FfiConverterTypeRevocationRegistryDefinitionPrivate.lower(revRegPriv),
                                                                                   FfiConverterTypeRevocationStatusList.lower(currentList), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeIssuer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Issuer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Issuer {
        return Issuer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Issuer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Issuer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Issuer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeIssuer_lift(_ pointer: UnsafeMutableRawPointer) throws -> Issuer {
    return try FfiConverterTypeIssuer.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeIssuer_lower(_ value: Issuer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIssuer.lower(value)
}

public protocol PresentationProtocol: AnyObject {
    func toJson() -> String
}

open class Presentation:
    PresentationProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_presentation(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_presentation_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_presentation(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_presentation_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePresentation: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Presentation

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Presentation {
        return Presentation(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Presentation) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Presentation {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Presentation, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePresentation_lift(_ pointer: UnsafeMutableRawPointer) throws -> Presentation {
    return try FfiConverterTypePresentation.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePresentation_lower(_ value: Presentation) -> UnsafeMutableRawPointer {
    return FfiConverterTypePresentation.lower(value)
}

public protocol PresentationRequestProtocol: AnyObject {
    func toJson() -> String
}

open class PresentationRequest:
    PresentationRequestProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_presentationrequest(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_presentationrequest_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_presentationrequest(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_presentationrequest_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePresentationRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PresentationRequest

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PresentationRequest {
        return PresentationRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PresentationRequest) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PresentationRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PresentationRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePresentationRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> PresentationRequest {
    return try FfiConverterTypePresentationRequest.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePresentationRequest_lower(_ value: PresentationRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypePresentationRequest.lower(value)
}

public protocol ProverProtocol: AnyObject {
    func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: String, linkSecretId: String, credOffer: CredentialOffer) throws -> CredentialRequestTuple

    func createOrUpdateRevocationState(revRegDef: RevocationRegistryDefinition, revStatusList: RevocationStatusList, revRegIdx: UInt32, tailsPath: String, revState: CredentialRevocationState?, oldRevStatusList: RevocationStatusList?) throws -> CredentialRevocationState

    func createPresentation(presReq: PresentationRequest, requestedCredentials: [RequestedCredential], selfAttestedAttributes: [String: String]?, linkSecret: String, schemas: [String: Schema], credDefs: [String: CredentialDefinition]) throws -> Presentation

    func createRevocationState(revRegDef: RevocationRegistryDefinition, revRegDelta: RevocationRegistryDelta, timestamp: UInt64, revRegIdx: UInt32, tailsPath: String) throws -> CredentialRevocationState

    func processCredential(cred: Credential, credReqMetadata: CredentialRequestMetadata, linkSecret: String, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws -> Credential
}

open class Prover:
    ProverProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_prover(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_anoncreds_uniffi_fn_constructor_prover_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_prover(pointer, $0) }
    }

    open func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: String, linkSecretId: String, credOffer: CredentialOffer) throws -> CredentialRequestTuple {
        return try FfiConverterTypeCredentialRequestTuple.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_prover_create_credential_request(self.uniffiClonePointer(),
                                                                               FfiConverterOptionString.lower(entropy),
                                                                               FfiConverterOptionString.lower(proverDid),
                                                                               FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                               FfiConverterString.lower(linkSecret),
                                                                               FfiConverterString.lower(linkSecretId),
                                                                               FfiConverterTypeCredentialOffer.lower(credOffer), $0)
        })
    }

    open func createOrUpdateRevocationState(revRegDef: RevocationRegistryDefinition, revStatusList: RevocationStatusList, revRegIdx: UInt32, tailsPath: String, revState: CredentialRevocationState?, oldRevStatusList: RevocationStatusList?) throws -> CredentialRevocationState {
        return try FfiConverterTypeCredentialRevocationState.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_prover_create_or_update_revocation_state(self.uniffiClonePointer(),
                                                                                       FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                                       FfiConverterTypeRevocationStatusList.lower(revStatusList),
                                                                                       FfiConverterUInt32.lower(revRegIdx),
                                                                                       FfiConverterString.lower(tailsPath),
                                                                                       FfiConverterOptionTypeCredentialRevocationState.lower(revState),
                                                                                       FfiConverterOptionTypeRevocationStatusList.lower(oldRevStatusList), $0)
        })
    }

    open func createPresentation(presReq: PresentationRequest, requestedCredentials: [RequestedCredential], selfAttestedAttributes: [String: String]?, linkSecret: String, schemas: [String: Schema], credDefs: [String: CredentialDefinition]) throws -> Presentation {
        return try FfiConverterTypePresentation.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_prover_create_presentation(self.uniffiClonePointer(),
                                                                         FfiConverterTypePresentationRequest.lower(presReq),
                                                                         FfiConverterSequenceTypeRequestedCredential.lower(requestedCredentials),
                                                                         FfiConverterOptionDictionaryStringString.lower(selfAttestedAttributes),
                                                                         FfiConverterString.lower(linkSecret),
                                                                         FfiConverterDictionaryStringTypeSchema.lower(schemas),
                                                                         FfiConverterDictionaryStringTypeCredentialDefinition.lower(credDefs), $0)
        })
    }

    open func createRevocationState(revRegDef: RevocationRegistryDefinition, revRegDelta: RevocationRegistryDelta, timestamp: UInt64, revRegIdx: UInt32, tailsPath: String) throws -> CredentialRevocationState {
        return try FfiConverterTypeCredentialRevocationState.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_prover_create_revocation_state(self.uniffiClonePointer(),
                                                                             FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                             FfiConverterTypeRevocationRegistryDelta.lower(revRegDelta),
                                                                             FfiConverterUInt64.lower(timestamp),
                                                                             FfiConverterUInt32.lower(revRegIdx),
                                                                             FfiConverterString.lower(tailsPath), $0)
        })
    }

    open func processCredential(cred: Credential, credReqMetadata: CredentialRequestMetadata, linkSecret: String, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws -> Credential {
        return try FfiConverterTypeCredential.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_prover_process_credential(self.uniffiClonePointer(),
                                                                        FfiConverterTypeCredential.lower(cred),
                                                                        FfiConverterTypeCredentialRequestMetadata.lower(credReqMetadata),
                                                                        FfiConverterString.lower(linkSecret),
                                                                        FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                        FfiConverterOptionTypeRevocationRegistryDefinition.lower(revRegDef), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeProver: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Prover

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Prover {
        return Prover(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Prover) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Prover {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Prover, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeProver_lift(_ pointer: UnsafeMutableRawPointer) throws -> Prover {
    return try FfiConverterTypeProver.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeProver_lower(_ value: Prover) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProver.lower(value)
}

public protocol RevocationRegistryDefinitionProtocol: AnyObject {
    func issuerId() -> String

    func maxCredNum() -> UInt32

    func revRegId() -> String

    func tailsHash() -> String

    func tailsLocation() -> String

    func toJson() -> String
}

open class RevocationRegistryDefinition:
    RevocationRegistryDefinitionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_revocationregistrydefinition(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_revocationregistrydefinition_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_revocationregistrydefinition(pointer, $0) }
    }

    open func issuerId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_issuer_id(self.uniffiClonePointer(), $0)
        })
    }

    open func maxCredNum() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_max_cred_num(self.uniffiClonePointer(), $0)
        })
    }

    open func revRegId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_rev_reg_id(self.uniffiClonePointer(), $0)
        })
    }

    open func tailsHash() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_tails_hash(self.uniffiClonePointer(), $0)
        })
    }

    open func tailsLocation() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_tails_location(self.uniffiClonePointer(), $0)
        })
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinition_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevocationRegistryDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinition {
        return RevocationRegistryDefinition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinition_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinition {
    return try FfiConverterTypeRevocationRegistryDefinition.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinition_lower(_ value: RevocationRegistryDefinition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinition.lower(value)
}

public protocol RevocationRegistryDefinitionPrivateProtocol: AnyObject {
    func toJson() -> String
}

open class RevocationRegistryDefinitionPrivate:
    RevocationRegistryDefinitionPrivateProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_revocationregistrydefinitionprivate(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_revocationregistrydefinitionprivate_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_revocationregistrydefinitionprivate(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydefinitionprivate_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevocationRegistryDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionPrivate

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionPrivate {
        return RevocationRegistryDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionPrivate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinitionPrivate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinitionPrivate_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionPrivate {
    return try FfiConverterTypeRevocationRegistryDefinitionPrivate.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinitionPrivate_lower(_ value: RevocationRegistryDefinitionPrivate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinitionPrivate.lower(value)
}

public protocol RevocationRegistryDeltaProtocol: AnyObject {
    func toJson() -> String
}

open class RevocationRegistryDelta:
    RevocationRegistryDeltaProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_revocationregistrydelta(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_revocationregistrydelta_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_revocationregistrydelta(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationregistrydelta_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevocationRegistryDelta: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDelta

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDelta {
        return RevocationRegistryDelta(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDelta) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDelta {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDelta, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDelta_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDelta {
    return try FfiConverterTypeRevocationRegistryDelta.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDelta_lower(_ value: RevocationRegistryDelta) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDelta.lower(value)
}

public protocol RevocationStatusListProtocol: AnyObject {
    func toJson() -> String
}

open class RevocationStatusList:
    RevocationStatusListProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_revocationstatuslist(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_revocationstatuslist_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_revocationstatuslist(pointer, $0) }
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_revocationstatuslist_to_json(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevocationStatusList: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationStatusList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationStatusList {
        return RevocationStatusList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationStatusList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationStatusList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationStatusList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationStatusList_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationStatusList {
    return try FfiConverterTypeRevocationStatusList.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationStatusList_lower(_ value: RevocationStatusList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationStatusList.lower(value)
}

public protocol SchemaProtocol: AnyObject {
    func issuerId() -> String

    func name() -> String

    func schemaId() -> String

    func toJson() -> String

    func version() -> String
}

open class Schema:
    SchemaProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_schema(self.pointer, $0) }
    }

    public convenience init(json: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeErrorCode.lift) {
                uniffi_anoncreds_uniffi_fn_constructor_schema_new(
                    FfiConverterString.lower(json), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_schema(pointer, $0) }
    }

    open func issuerId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_schema_issuer_id(self.uniffiClonePointer(), $0)
        })
    }

    open func name() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_schema_name(self.uniffiClonePointer(), $0)
        })
    }

    open func schemaId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_schema_schema_id(self.uniffiClonePointer(), $0)
        })
    }

    open func toJson() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_schema_to_json(self.uniffiClonePointer(), $0)
        })
    }

    open func version() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_anoncreds_uniffi_fn_method_schema_version(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSchema: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Schema

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Schema {
        return Schema(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Schema) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Schema {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Schema, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSchema_lift(_ pointer: UnsafeMutableRawPointer) throws -> Schema {
    return try FfiConverterTypeSchema.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSchema_lower(_ value: Schema) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSchema.lower(value)
}

public protocol VerifierProtocol: AnyObject {
    func generateNonce() throws -> String

    func verifyPresentation(presentation: Presentation, presReq: PresentationRequest, schemas: [String: Schema], credDefs: [String: CredentialDefinition], revRegDefs: [String: RevocationRegistryDefinition]?, revStatusLists: [RevocationStatusList]?, nonrevokeIntervalOverride: [String: [UInt64: UInt64]]?) throws -> Bool
}

open class Verifier:
    VerifierProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_anoncreds_uniffi_fn_clone_verifier(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_anoncreds_uniffi_fn_constructor_verifier_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_anoncreds_uniffi_fn_free_verifier(pointer, $0) }
    }

    open func generateNonce() throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_verifier_generate_nonce(self.uniffiClonePointer(), $0)
        })
    }

    open func verifyPresentation(presentation: Presentation, presReq: PresentationRequest, schemas: [String: Schema], credDefs: [String: CredentialDefinition], revRegDefs: [String: RevocationRegistryDefinition]?, revStatusLists: [RevocationStatusList]?, nonrevokeIntervalOverride: [String: [UInt64: UInt64]]?) throws -> Bool {
        return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
            uniffi_anoncreds_uniffi_fn_method_verifier_verify_presentation(self.uniffiClonePointer(),
                                                                           FfiConverterTypePresentation.lower(presentation),
                                                                           FfiConverterTypePresentationRequest.lower(presReq),
                                                                           FfiConverterDictionaryStringTypeSchema.lower(schemas),
                                                                           FfiConverterDictionaryStringTypeCredentialDefinition.lower(credDefs),
                                                                           FfiConverterOptionDictionaryStringTypeRevocationRegistryDefinition.lower(revRegDefs),
                                                                           FfiConverterOptionSequenceTypeRevocationStatusList.lower(revStatusLists),
                                                                           FfiConverterOptionDictionaryStringDictionaryUInt64UInt64.lower(nonrevokeIntervalOverride), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerifier: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Verifier

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Verifier {
        return Verifier(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Verifier) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Verifier {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Verifier, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifier_lift(_ pointer: UnsafeMutableRawPointer) throws -> Verifier {
    return try FfiConverterTypeVerifier.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifier_lower(_ value: Verifier) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVerifier.lower(value)
}

public struct CredentialDefinitionTuple {
    public var credDef: CredentialDefinition
    public var credDefPriv: CredentialDefinitionPrivate
    public var keyCorrectnessProof: CredentialKeyCorrectnessProof

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credDef: CredentialDefinition, credDefPriv: CredentialDefinitionPrivate, keyCorrectnessProof: CredentialKeyCorrectnessProof) {
        self.credDef = credDef
        self.credDefPriv = credDefPriv
        self.keyCorrectnessProof = keyCorrectnessProof
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialDefinitionTuple: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionTuple {
        return
            try CredentialDefinitionTuple(
                credDef: FfiConverterTypeCredentialDefinition.read(from: &buf),
                credDefPriv: FfiConverterTypeCredentialDefinitionPrivate.read(from: &buf),
                keyCorrectnessProof: FfiConverterTypeCredentialKeyCorrectnessProof.read(from: &buf)
            )
    }

    public static func write(_ value: CredentialDefinitionTuple, into buf: inout [UInt8]) {
        FfiConverterTypeCredentialDefinition.write(value.credDef, into: &buf)
        FfiConverterTypeCredentialDefinitionPrivate.write(value.credDefPriv, into: &buf)
        FfiConverterTypeCredentialKeyCorrectnessProof.write(value.keyCorrectnessProof, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinitionTuple_lift(_ buf: RustBuffer) throws -> CredentialDefinitionTuple {
    return try FfiConverterTypeCredentialDefinitionTuple.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialDefinitionTuple_lower(_ value: CredentialDefinitionTuple) -> RustBuffer {
    return FfiConverterTypeCredentialDefinitionTuple.lower(value)
}

public struct CredentialRequestTuple {
    public var request: CredentialRequest
    public var metadata: CredentialRequestMetadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(request: CredentialRequest, metadata: CredentialRequestMetadata) {
        self.request = request
        self.metadata = metadata
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialRequestTuple: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRequestTuple {
        return
            try CredentialRequestTuple(
                request: FfiConverterTypeCredentialRequest.read(from: &buf),
                metadata: FfiConverterTypeCredentialRequestMetadata.read(from: &buf)
            )
    }

    public static func write(_ value: CredentialRequestTuple, into buf: inout [UInt8]) {
        FfiConverterTypeCredentialRequest.write(value.request, into: &buf)
        FfiConverterTypeCredentialRequestMetadata.write(value.metadata, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequestTuple_lift(_ buf: RustBuffer) throws -> CredentialRequestTuple {
    return try FfiConverterTypeCredentialRequestTuple.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRequestTuple_lower(_ value: CredentialRequestTuple) -> RustBuffer {
    return FfiConverterTypeCredentialRequestTuple.lower(value)
}

public struct CredentialRevocationConfig {
    public var regDef: RevocationRegistryDefinition
    public var regDefPrivate: RevocationRegistryDefinitionPrivate
    public var statusList: RevocationStatusList
    public var registryIndex: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regDef: RevocationRegistryDefinition, regDefPrivate: RevocationRegistryDefinitionPrivate, statusList: RevocationStatusList, registryIndex: UInt32) {
        self.regDef = regDef
        self.regDefPrivate = regDefPrivate
        self.statusList = statusList
        self.registryIndex = registryIndex
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRevocationConfig {
        return
            try CredentialRevocationConfig(
                regDef: FfiConverterTypeRevocationRegistryDefinition.read(from: &buf),
                regDefPrivate: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: &buf),
                statusList: FfiConverterTypeRevocationStatusList.read(from: &buf),
                registryIndex: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: CredentialRevocationConfig, into buf: inout [UInt8]) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.regDef, into: &buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.regDefPrivate, into: &buf)
        FfiConverterTypeRevocationStatusList.write(value.statusList, into: &buf)
        FfiConverterUInt32.write(value.registryIndex, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRevocationConfig_lift(_ buf: RustBuffer) throws -> CredentialRevocationConfig {
    return try FfiConverterTypeCredentialRevocationConfig.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCredentialRevocationConfig_lower(_ value: CredentialRevocationConfig) -> RustBuffer {
    return FfiConverterTypeCredentialRevocationConfig.lower(value)
}

public struct RequestedCredential {
    public var cred: Credential
    public var timestamp: UInt64?
    public var revState: CredentialRevocationState?
    public var requestedAttributes: [String: Bool]
    public var requestedPredicates: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cred: Credential, timestamp: UInt64?, revState: CredentialRevocationState?, requestedAttributes: [String: Bool], requestedPredicates: [String]) {
        self.cred = cred
        self.timestamp = timestamp
        self.revState = revState
        self.requestedAttributes = requestedAttributes
        self.requestedPredicates = requestedPredicates
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRequestedCredential: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestedCredential {
        return
            try RequestedCredential(
                cred: FfiConverterTypeCredential.read(from: &buf),
                timestamp: FfiConverterOptionUInt64.read(from: &buf),
                revState: FfiConverterOptionTypeCredentialRevocationState.read(from: &buf),
                requestedAttributes: FfiConverterDictionaryStringBool.read(from: &buf),
                requestedPredicates: FfiConverterSequenceString.read(from: &buf)
            )
    }

    public static func write(_ value: RequestedCredential, into buf: inout [UInt8]) {
        FfiConverterTypeCredential.write(value.cred, into: &buf)
        FfiConverterOptionUInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionTypeCredentialRevocationState.write(value.revState, into: &buf)
        FfiConverterDictionaryStringBool.write(value.requestedAttributes, into: &buf)
        FfiConverterSequenceString.write(value.requestedPredicates, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRequestedCredential_lift(_ buf: RustBuffer) throws -> RequestedCredential {
    return try FfiConverterTypeRequestedCredential.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRequestedCredential_lower(_ value: RequestedCredential) -> RustBuffer {
    return FfiConverterTypeRequestedCredential.lower(value)
}

public struct RevocationRegistryDefinitionTuple {
    public var revRegDef: RevocationRegistryDefinition
    public var revRegDefPriv: RevocationRegistryDefinitionPrivate

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(revRegDef: RevocationRegistryDefinition, revRegDefPriv: RevocationRegistryDefinitionPrivate) {
        self.revRegDef = revRegDef
        self.revRegDefPriv = revRegDefPriv
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevocationRegistryDefinitionTuple: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionTuple {
        return
            try RevocationRegistryDefinitionTuple(
                revRegDef: FfiConverterTypeRevocationRegistryDefinition.read(from: &buf),
                revRegDefPriv: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: &buf)
            )
    }

    public static func write(_ value: RevocationRegistryDefinitionTuple, into buf: inout [UInt8]) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.revRegDef, into: &buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.revRegDefPriv, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinitionTuple_lift(_ buf: RustBuffer) throws -> RevocationRegistryDefinitionTuple {
    return try FfiConverterTypeRevocationRegistryDefinitionTuple.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevocationRegistryDefinitionTuple_lower(_ value: RevocationRegistryDefinitionTuple) -> RustBuffer {
    return FfiConverterTypeRevocationRegistryDefinitionTuple.lower(value)
}

public enum ErrorCode {
    case Input(errorMessage: String
    )
    case IoError(errorMessage: String
    )
    case InvalidState(errorMessage: String
    )
    case Unexpected(errorMessage: String
    )
    case CredentialRevoked(errorMessage: String
    )
    case InvalidUserRevocId(errorMessage: String
    )
    case ProofRejected(errorMessage: String
    )
    case RevocationRegistryFull(errorMessage: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeErrorCode: FfiConverterRustBuffer {
    typealias SwiftType = ErrorCode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ErrorCode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Input(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 2: return try .IoError(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 3: return try .InvalidState(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 4: return try .Unexpected(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 5: return try .CredentialRevoked(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 6: return try .InvalidUserRevocId(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 7: return try .ProofRejected(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        case 8: return try .RevocationRegistryFull(
                errorMessage: FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ErrorCode, into buf: inout [UInt8]) {
        switch value {
        case let .Input(errorMessage):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .IoError(errorMessage):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .InvalidState(errorMessage):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .Unexpected(errorMessage):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .CredentialRevoked(errorMessage):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .InvalidUserRevocId(errorMessage):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .ProofRejected(errorMessage):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(errorMessage, into: &buf)

        case let .RevocationRegistryFull(errorMessage):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(errorMessage, into: &buf)
        }
    }
}

extension ErrorCode: Equatable, Hashable {}

extension ErrorCode: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeCredentialRevocationState: FfiConverterRustBuffer {
    typealias SwiftType = CredentialRevocationState?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCredentialRevocationState.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCredentialRevocationState.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeRevocationRegistryDefinition: FfiConverterRustBuffer {
    typealias SwiftType = RevocationRegistryDefinition?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevocationRegistryDefinition.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationRegistryDefinition.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeRevocationStatusList: FfiConverterRustBuffer {
    typealias SwiftType = RevocationStatusList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevocationStatusList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationStatusList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    typealias SwiftType = CredentialRevocationConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCredentialRevocationConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCredentialRevocationConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceTypeRevocationStatusList: FfiConverterRustBuffer {
    typealias SwiftType = [RevocationStatusList]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeRevocationStatusList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeRevocationStatusList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionDictionaryStringTypeRevocationRegistryDefinition: FfiConverterRustBuffer {
    typealias SwiftType = [String: RevocationRegistryDefinition]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeRevocationRegistryDefinition.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeRevocationRegistryDefinition.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionDictionaryStringDictionaryUInt64UInt64: FfiConverterRustBuffer {
    typealias SwiftType = [String: [UInt64: UInt64]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringDictionaryUInt64UInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringDictionaryUInt64UInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    public static func write(_ value: [UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt32.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeRevocationStatusList: FfiConverterRustBuffer {
    typealias SwiftType = [RevocationStatusList]

    public static func write(_ value: [RevocationStatusList], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRevocationStatusList.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RevocationStatusList] {
        let len: Int32 = try readInt(&buf)
        var seq = [RevocationStatusList]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeRevocationStatusList.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeRequestedCredential: FfiConverterRustBuffer {
    typealias SwiftType = [RequestedCredential]

    public static func write(_ value: [RequestedCredential], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRequestedCredential.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RequestedCredential] {
        let len: Int32 = try readInt(&buf)
        var seq = [RequestedCredential]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeRequestedCredential.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryUInt64UInt64: FfiConverterRustBuffer {
    public static func write(_ value: [UInt64: UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterUInt64.write(key, into: &buf)
            FfiConverterUInt64.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64: UInt64] {
        let len: Int32 = try readInt(&buf)
        var dict = [UInt64: UInt64]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterUInt64.read(from: &buf)
            let value = try FfiConverterUInt64.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringBool: FfiConverterRustBuffer {
    public static func write(_ value: [String: Bool], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterBool.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Bool] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Bool]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterBool.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringTypeCredentialDefinition: FfiConverterRustBuffer {
    public static func write(_ value: [String: CredentialDefinition], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeCredentialDefinition.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: CredentialDefinition] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: CredentialDefinition]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeCredentialDefinition.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringTypeRevocationRegistryDefinition: FfiConverterRustBuffer {
    public static func write(_ value: [String: RevocationRegistryDefinition], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeRevocationRegistryDefinition.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: RevocationRegistryDefinition] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: RevocationRegistryDefinition]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeRevocationRegistryDefinition.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringTypeSchema: FfiConverterRustBuffer {
    public static func write(_ value: [String: Schema], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeSchema.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Schema] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Schema]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeSchema.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringDictionaryUInt64UInt64: FfiConverterRustBuffer {
    public static func write(_ value: [String: [UInt64: UInt64]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterDictionaryUInt64UInt64.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [UInt64: UInt64]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [UInt64: UInt64]]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterDictionaryUInt64UInt64.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func createLinkSecret() throws -> String {
    return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeErrorCode.lift) {
        uniffi_anoncreds_uniffi_fn_func_create_link_secret($0
        )
    })
}

public func setDefaultLogger() throws { try rustCallWithError(FfiConverterTypeErrorCode.lift) {
    uniffi_anoncreds_uniffi_fn_func_set_default_logger($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_anoncreds_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_func_create_link_secret() != 60213 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_func_set_default_logger() != 62338 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_cred_def_id() != 44658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_rev_reg_id() != 23221 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_rev_reg_index() != 39926 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_schema_id() != 49718 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_to_json() != 3829 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credential_values() != 28068 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialconversions_credential_from_w3c_json() != 25906 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialconversions_credential_to_w3c_json() != 51361 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialdefinition_cred_def_id() != 59476 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialdefinition_issuer_id() != 9361 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialdefinition_schema_id() != 18303 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialdefinition_to_json() != 17168 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialdefinitionprivate_to_json() != 37500 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialkeycorrectnessproof_to_json() != 32484 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialoffer_cred_def_id() != 48352 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialoffer_to_json() != 1155 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialrequest_to_json() != 54021 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialrequestmetadata_to_json() != 40352 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_credentialrevocationstate_to_json() != 32380 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_credential() != 42750 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_credential_definition() != 19412 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_credential_offer() != 56576 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_revocation_registry_def() != 9548 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_revocation_status_list() != 61724 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_create_schema() != 43001 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_issuer_update_revocation_status_list() != 55511 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_presentation_to_json() != 46063 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_presentationrequest_to_json() != 26674 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_prover_create_credential_request() != 29917 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_prover_create_or_update_revocation_state() != 52935 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_prover_create_presentation() != 6107 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_prover_create_revocation_state() != 19382 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_prover_process_credential() != 17885 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_issuer_id() != 49869 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_max_cred_num() != 51790 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_rev_reg_id() != 28180 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_tails_hash() != 12492 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_tails_location() != 59065 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinition_to_json() != 46982 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydefinitionprivate_to_json() != 35251 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationregistrydelta_to_json() != 17681 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_revocationstatuslist_to_json() != 18164 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_schema_issuer_id() != 13950 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_schema_name() != 4057 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_schema_schema_id() != 12215 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_schema_to_json() != 18990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_schema_version() != 26788 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_verifier_generate_nonce() != 18829 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_method_verifier_verify_presentation() != 32929 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credential_new() != 19176 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialconversions_new() != 38313 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialdefinition_new() != 6322 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialdefinitionprivate_new() != 51919 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialkeycorrectnessproof_new() != 2410 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialoffer_new() != 17400 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialrequest_new() != 5273 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialrequestmetadata_new() != 16226 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_credentialrevocationstate_new() != 9831 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_issuer_new() != 49119 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_presentation_new() != 62029 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_presentationrequest_new() != 24331 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_prover_new() != 36337 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_revocationregistrydefinition_new() != 16747 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_revocationregistrydefinitionprivate_new() != 37185 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_revocationregistrydelta_new() != 45909 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_revocationstatuslist_new() != 56285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_schema_new() != 29994 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_anoncreds_uniffi_checksum_constructor_verifier_new() != 7088 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
